
// Wizard-generated connection point proxy class
// WARNING: This file may be regenerated by the wizard


#pragma once

template<class T>
class CProxy_IMagpieLoggerEvents :
  public IConnectionPointImpl<T, &__uuidof(_IMagpieLoggerEvents)>
{
public:
  HRESULT Fire_OnLog( VARIANT val,  BSTR bsModuleID)
  {
    HRESULT hr = S_OK;
    T * pThis = static_cast<T *>(this);
    int cConnections = m_vec.GetSize();

    for (int iConnection = 0; iConnection < cConnections; iConnection++)
    {
      pThis->Lock();
      CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
      pThis->Unlock();

      IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

      if (pConnection)
      {
        CComVariant avarParams[2];
        avarParams[1] = val;
        avarParams[0] = bsModuleID;
        avarParams[0].vt = VT_BSTR;
        DISPPARAMS params = { avarParams, NULL, 2, 0 };
        hr = pConnection->Invoke(1, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, NULL, NULL, NULL);
      }
    }
    return hr;
  }
  HRESULT Fire_OnDebug( VARIANT val,  BSTR bsModuleID)
  {
    HRESULT hr = S_OK;
    T * pThis = static_cast<T *>(this);
    int cConnections = m_vec.GetSize();

    for (int iConnection = 0; iConnection < cConnections; iConnection++)
    {
      pThis->Lock();
      CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
      pThis->Unlock();

      IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

      if (pConnection)
      {
        CComVariant avarParams[2];
        avarParams[1] = val;
        avarParams[0] = bsModuleID;
        avarParams[0].vt = VT_BSTR;
        DISPPARAMS params = { avarParams, NULL, 2, 0 };
        hr = pConnection->Invoke(2, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, NULL, NULL, NULL);
      }
    }
    return hr;
  }
  HRESULT Fire_OnInfo( VARIANT val,  BSTR bsModuleID)
  {
    HRESULT hr = S_OK;
    T * pThis = static_cast<T *>(this);
    int cConnections = m_vec.GetSize();

    for (int iConnection = 0; iConnection < cConnections; iConnection++)
    {
      pThis->Lock();
      CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
      pThis->Unlock();

      IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

      if (pConnection)
      {
        CComVariant avarParams[2];
        avarParams[1] = val;
        avarParams[0] = bsModuleID;
        avarParams[0].vt = VT_BSTR;
        DISPPARAMS params = { avarParams, NULL, 2, 0 };
        hr = pConnection->Invoke(3, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, NULL, NULL, NULL);
      }
    }
    return hr;
  }
  HRESULT Fire_OnWarn( VARIANT val,  BSTR bsModuleID)
  {
    HRESULT hr = S_OK;
    T * pThis = static_cast<T *>(this);
    int cConnections = m_vec.GetSize();

    for (int iConnection = 0; iConnection < cConnections; iConnection++)
    {
      pThis->Lock();
      CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
      pThis->Unlock();

      IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

      if (pConnection)
      {
        CComVariant avarParams[2];
        avarParams[1] = val;
        avarParams[0] = bsModuleID;
        avarParams[0].vt = VT_BSTR;
        DISPPARAMS params = { avarParams, NULL, 2, 0 };
        hr = pConnection->Invoke(4, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, NULL, NULL, NULL);
      }
    }
    return hr;
  }
  HRESULT Fire_OnError( VARIANT val,  BSTR bsModuleID)
  {
    HRESULT hr = S_OK;
    T * pThis = static_cast<T *>(this);
    int cConnections = m_vec.GetSize();

    for (int iConnection = 0; iConnection < cConnections; iConnection++)
    {
      pThis->Lock();
      CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
      pThis->Unlock();

      IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

      if (pConnection)
      {
        CComVariant avarParams[2];
        avarParams[1] = val;
        avarParams[0] = bsModuleID;
        avarParams[0].vt = VT_BSTR;
        DISPPARAMS params = { avarParams, NULL, 2, 0 };
        hr = pConnection->Invoke(5, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, NULL, NULL, NULL);
      }
    }
    return hr;
  }
};

